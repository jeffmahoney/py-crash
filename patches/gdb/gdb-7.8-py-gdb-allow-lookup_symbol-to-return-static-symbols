From: Jeff Mahoney <jeffm@suse.com>
Subject: py-gdb: Allow lookup_symbol to return static symbols

We complain about needing a frame even when one isn't needed. This patch
lets py-gdb access static variables so that the messy and error-prone
gdb.parse_and_eval isn't required to access them.

Signed-off-by: Jeff Mahoney <jeffm@suse.com>
---

 gdb/python/py-symbol.c |   20 ++++++++++++--------
 1 file changed, 12 insertions(+), 8 deletions(-)

--- a/gdb/python/py-symbol.c	2014-09-17 08:09:19.121404003 -0400
+++ b/gdb/python/py-symbol.c	2014-09-17 08:09:49.331515441 -0400
@@ -369,24 +390,28 @@ gdbpy_lookup_symbol (PyObject *self, PyO
 
   if (block_obj)
     block = block_object_to_block (block_obj);
-  else
+
+  TRY_CATCH (except, RETURN_MASK_ALL)
+    {
+      symbol = lookup_symbol (name, block, domain, &is_a_field_of_this);
+    }
+  GDB_PY_HANDLE_EXCEPTION (except);
+
+  if (!block)
     {
       struct frame_info *selected_frame;
       volatile struct gdb_exception except;
 
       TRY_CATCH (except, RETURN_MASK_ALL)
 	{
-	  selected_frame = get_selected_frame (_("No frame selected."));
-	  block = get_frame_block (selected_frame, NULL);
+	  if (symbol && symbol_read_needs_frame(symbol)) {
+	    selected_frame = get_selected_frame (_("No frame selected."));
+	    block = get_frame_block (selected_frame, NULL);
+	  }
 	}
       GDB_PY_HANDLE_EXCEPTION (except);
     }
 
-  TRY_CATCH (except, RETURN_MASK_ALL)
-    {
-      symbol = lookup_symbol (name, block, domain, &is_a_field_of_this);
-    }
-  GDB_PY_HANDLE_EXCEPTION (except);
 
   ret_tuple = PyTuple_New (2);
   if (!ret_tuple)
